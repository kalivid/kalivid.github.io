<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux系统shell脚本编程（一）]]></title>
    <url>%2F2018%2F04%2F08%2FLinux%E7%B3%BB%E7%BB%9Fshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[shell脚本是以行为单位，在执行脚本的时候会分解成一行一行执行，shell脚本主要由注释、命令、变量组成。本文主要介绍了显示（输出）、运算和常用变量 显示echo普通使用1234echo &quot;hello,world&quot;# 转义换行符echo -e &quot;1\t2\t3&quot; #1 2 3 彩色输出123456789101112131415161718192021# 设置字体为红色，背景色为绿色echo -e &quot;\e[1;31;42mThis is red text\e[0m&quot;# 1 为颜色饱和度# 31 为字体颜色，只需要背景色时，填1是加粗，0是不加粗，默认是0# 42 为背景颜色# 字体颜色码# 重置=0，黑色=30，红色=31，绿色=32，黄色=33，蓝色=34，洋红=35，青色=36，白色=37# 背景色颜色码# 重置=0，黑色=40，红色=41，绿色=42，黄色=43，蓝色=44，洋红=45，青色=46，白色=47# 字体闪烁# 普通echo -e &quot;\033[37;31;5mMySQL Server Stop...\033[39;49;0m&quot;# 加粗echo -e &quot;\033[1;31;5mMySQL Server Stop...\033[39;49;0m&quot;# 加粗并加下划线echo -e &quot;\033[1;4;31;5mMySQL Server Stop...\033[39;49;0m&quot;## 红色数字处还有其他数字参数：0 关闭所有属性、1 设置高亮度（加粗）、4 下划线、5 闪烁、7 反显、8 消隐 PS：123456789101112&quot;&quot; # 允许通过$符号引用其他变量值&apos;&apos; # $符号会被原样输出`` # 将命令执行结果赋值给变量a=&quot;hello,world my girl&quot;echo $&#123;a:12&#125; #my girl 从第几个字符开始截取echo $&#123;a:12:2&#125; #my 从第几个字符开始并截取指定字符数$&#123;字符串#匹配字&#125; # 从开头删除最短匹配字符串 $&#123;字符串##匹配字&#125; # 从开头删除最长匹配字符串$&#123;字符串%匹配字&#125; # 从结尾删除最短匹配字符串$&#123;字符串%%匹配字&#125; # 从结尾删除最长匹配字符串 printf使用1234printf &quot;%-5s %-10s %-4s\n&quot; NO Name Markprintf &quot;%-5s %-10s %-4.2f\n&quot; 01 Tom 90.3456printf &quot;%-5s %-10s %-4.2f\n&quot; 02 Jack 89.2345printf &quot;%-5s %-10s %-4.2f\n&quot; 03 Jeff 98.4323 %-5s 表示左对齐且宽度为5的字符串代替（-表示左对齐）， 不使用表示右对齐 %-4.2f 表示左对齐宽度为4，保留两位小数 常用格式替代符 %s 字符串 %f 浮点数 %% %字符串 常用转义序列 \r 回车 \n 换行 \f 换页 \t 水平制表符 \ 反斜杠字符串 运算let运算12345#!/bin/bashnum1=10num2=7let result=num1+num2echo $result 自加/减1 let result++/let result– let rusult-=10等于result=result-10 操作符[]运算1234567#!/bin/bashnum1=10num2=7result=$[$num1+num2]echo &quot;$result&quot;# PS []里面可以引用$ (())运算1234567#!/bin/bashnum1=10num2=6result=$((num1+num2))echo &quot;$result&quot;# PS (())里面也可以引用$ expr运算1234567#!/bin/bashnum1=10num2=6result=`expr $num1 + $num2` echo &quot;$result&quot;# PS: 注意加法符号两端的空格一定要空 常用运算符 加 + 减 - 乘 \* 除 / 取余 % 精密运算bc1234567891011121314echo &quot;1.212*3&quot; | bc # 3.636echo &quot;scale=2;3/8&quot; | bc # 0.37 scale=2是将bc输出结果的小数位设置为2# 进制转换abc=192echo &quot;obase=2;$abc&quot; | bc # 11000000 十进制转二进制abc=11000000echo &quot;obase=10;$abc&quot; | bc # 192 二进制转十进制# 计算平方和平方根echo &quot;10^10&quot; | bcecho &quot;sqrt(100)&quot; | bc 常用变量环境变量环境变量配置文件 全局：/etc/profile 用户：~/.bash_profile 12345# 定义变量export a=1 或 a=1 # 临时生效， 永久生效需写入文件# 取消变量unset a 位置变量1./test.sh one two three four five six seven $0 表示文件名本身 $1~9 表示one~nine 预定义变量 $# : 命令行中位置参数的个数 $* : 所有位置参数的内容 $? : 上一条命令执行后返回的状态，返回为0时，表示执行正常 $_ : 上一条命令的参数 $$ : 当前所在进程的进程号 $! : 后台运行的最后一个进程号执行方法 sh script-name 这是当脚本文件本身没有可执行权限（即文件权限属性x位为-号）时常使用的方法，或者脚本文件开头没有指定解释器时需要使用的方法。推荐使用这种方法。 ./script-name或绝对路径/script-name 在当前路径下执行脚本(脚本需要有执行权限) source script-name或. script-name 读入脚本并执行，即将脚本中的变量加载到当前shell中执行，而不是产生一个子shell来执行文件中的命令 例子：12345678910111213# -rwxr-xr-x. 1 root root 35 3月 23 12:42 test.sh#! /bin/bashname=helloecho $name# ./test.shecho $name # 返回结果为空 # . test.shecho $name # 返回结果为hello#原因： ./test.sh 是开启一个子进程执行，故当前进程无name变量；而. test.sh是将shell脚本中的内容copy至当前进程并执行，所以有name变量]]></content>
      <categories>
        <category>shell脚本</category>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql之基本操作及权限]]></title>
    <url>%2F2017%2F09%2F17%2Fmysql%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一，尤其再WEB应用方面，著名的架构lamp、lnmp。 MySQL在Oracle的控制下开始变得封闭，新版本发布速度也大为减缓。而MariaDB是MySQL之父（Michael Widenius）在离开MySQL之后开的一个分支，开源，免费，基本兼容MySQL CRUBdatabase（库）C1create database 库名 charset 字符编码(utf8)； R12show databases; # 查看全部数据库show create database 库名; U1alter database 库名 charset 字符编码(gbk); D1drop database 库名; table（表）C1create table 表名(表结构) engine=存储引擎(innodb) default charset 字符编码; R123show tables; # 查看当前库下所有表show create table 表名;desc 表名; # 查看表结构 U1234567891011121314151617181920212223# 修改表名alter table 表名 rename 新表名;# 增加字段alter table 表名 add 字段名 数据类型 [完整性约束条件];alter table 表名 add 字段名 数据类型 [完整性约束条件] first;alter table 表名 add 字段名 数据类型 [完整性约束条件] after 字段名;# 删除字段alter table 表名 drop 字段名；# 修改字段alter table 表名 modify 字段名 数据类型 [完整性约束条件];alter table 表名 change 字段名 新字段名 数据类型 [完整性约束条件];# 增加主键alter table student1 modify name varchar(10) not null primary key;# 增加复合主键alter table service2 add primary key(host_ip,port);# 增加主键和自动增长alter table student1 modifu id int not null primary key auto_increment; 完整性约束条件： not nu11; default ‘male’ 及增加主键,ID自增； D1drop table 表名; data（数据）C12insert into 库名.表名 values位置传参1，位置传参2;insert into 库名.表名(字段名) values值1,值2; R12select * from 表名;select 字段名1，字段名2 from 表名; U1update 表名 set 字段名=值 where 字段名=值; D1delete from 表名 where 字段名=值; 拓展清空表12delete from 表名;truncate 表名； # 推荐 当数据量比较大的情况下，删除速度较快 拷贝1234# 拷贝表create table 新表名 select * from 被copy表名；# 拷贝表结构create table 新表名 select * from 被copy表名 where 不成立条件(1=2); 自增ID12create table 表名(id int primary key auto_increment,name varchar(10));create table 表名(id int not null unique,name char(10)); 权限123456insert # 插入delete # 删除update # 更新select # 查询all # 所有权限# 除all外其他权限可相互组合，all权限最大 创建用户1create user &apos;8192bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;; # 没有权限 赋予权限级别1：对所有库下的所有表下的所有字段1grant select on *.* to &apos;8192bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;; # @后面跟的是允许哪些机器登陆，可以是IP段。例：192.168.20.% 级别2：对db1库下的所有表下的所有字段1grant select on db1.* to &apos;8193bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;; 级别3：对db1库下的t1表下的所有字段1grant select on db1.t1 to &apos;8194bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;; 级别4：对db1库下的t1表下的id,name字段12grant select (id,name) on db1.t1 to &apos;8195bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;;grant select (id,name),update (name) on db1.t1 to &apos;8196bit&apos;@&apos;localhost&apos; identified by &apos;123&apos;; 刷新权限12# 修改完权限后，记得刷新权限flush privileges; 回收权限1revoke all on *.* from 用户名@远程主机; 查看所有用户及权限12345678910# 查看Mysql所有用户SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;# 查看某个用户的权限 show grants for &apos;jack&apos;@&apos;localhost&apos;;# 查看当前用户的权限show grants;# 查看某个用户权限select * from mysql.user where user=&apos;root&apos; \G 删除用户12delete from mysql.user where user=&apos;jack&apos; and host=&apos;localhost&apos;;# 删除完后刷新权限]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown初级使用]]></title>
    <url>%2F2017%2F09%2F04%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[markdown 笔记简介 标题一级二级三级四级五级六级有序列表 数字加英文点与字符中间加空格 这就是有序列表 不要就数字一定要连续，自动在前面加序号，可以一直是1. 无序列表 *或-与字符中间加空格 ps:*和-为英文状态下 这就是无序列表 插入图片方法：标准的Markdown语法![描述](地址) 地址 本地：re.png 网络：http://images2017.cnblogs.com/blog/1198001/201708/1198001-20170807193936065-647223707.png 效果: 插入链接[描述](链接地址) 例如：我的博客 粗体、斜体、删除线粗体：在文字前后添加 (注意符号与文字间不要有空格）斜体：在文字前后添加 *删除线：在文字前后添加 ~~效果： 粗体* 斜体*删除线 引用在文字前 添加 &gt;效果： 如果你无法简洁的表达你的想法，那只说明你还不够了解它。 –阿尔伯特·爱因斯坦 说的有道理 如果一个人以光的速度围着一棵树奔跑，那么他有可能操到自己。 闪电侠： 你在说什么？ 吃瓜群众：一脸懵逼的吃着瓜 吐个瓜子 再吐个瓜子 还有 我再吐 表格|sub1|sub2||—|—||:—|:—| # 左对齐|:—:|:—:| # 居中|—:|—:| # 右对齐|test1|test2| 效果： sub1 sub2 test1 test2 代码在代码前后增加 三个反单引号：```效果：12for i in range(1,101) print(i) 目录[TOC]### 这是啥##### 那是啥 流程图```flowst=&gt;start: Starte=&gt;end: Endop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?io=&gt;inputoutput: catch something…st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1```效果: 注意： 关键字(start、end、operation、subroutine、condition和input、output)后的冒号后要紧跟一个空格。 使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。更多关于流程图的语法说明:http://adrai.github.io/flowchart.js/ 时序图```sequenceAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob–&gt;Alice: I am good thanks!```效果： 更多关于时序图的语法说明：http://bramp.github.io/js-sequence-diagrams/ mathjax 公式123可以创建行内公式，例如：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ 或者块级公式，$$ x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$ 效果： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$ 批注在要添加注释的词语后面增加 ^1 ,结尾加入^1：空格 注释内容12hello[^1][^1]: hi 效果：hello^1 st=>start: Start e=>end: End op1=>operation: My Operation sub1=>subroutine: My Subroutine cond=>condition: Yes or No? io=>inputoutput: catch something... st->op1->cond cond(yes)->io->e cond(no)->sub1(right)->op1{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("sequence-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value)); var diagram = Diagram.parse(code); diagram.drawSVG("sequence-0", options);]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
